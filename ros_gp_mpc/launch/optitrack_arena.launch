<?xml version="1.0"?>
<launch>

    <arg name="quad_name" default="colibri"/>
    <arg name="use_mpc" default="true"/>
    <arg name="enable_command_feedthrough" default="true"/>

    <group ns="optitrack/calibration_trackable">
        <rosparam file="$(find rpg_calib)/trackables/calibration_trackable.yaml"/>
    </group>

    <group ns="optitrack/$(arg quad_name)">
        <rosparam file="$(find rpg_calib)/trackables/$(arg quad_name).yaml"/>
    </group>

    <node pkg="optitrack_linux_client" type="optitrack_linux_node" name="optitrack" output="screen">
        <param name="valid_transformation_is_required" value="true"/>
    </node>

    <node name="rqt_quad_gui" pkg="rqt_gui" type="rqt_gui"
        args="-s rqt_quad_gui.basic_flight.BasicFlight --args
        --quad_name $(arg quad_name)" output="screen"/>

    <group ns="$(arg quad_name)">

        <!-- start nodes on the quad via ssh-->
<!--         <machine name="$(arg quad_name)" address="192.168.100.21" env-loader="/home/nvidia/scripts/setupros.bash" -->
<!--                  user="nvidia"/> -->

<!--         <node machine="$(arg quad_name)" pkg="sbus_bridge" name="sbus_bridge" type="sbus_bridge" output="screen"> -->
<!--             <rosparam file="$(find sbus_bridge)/parameters/default.yaml"/> -->
<!--             <param name="port_name" value="/dev/ttyS4"/> -->
<!--             <remap from="control_command" to="quad/control_command"/> -->
<!--              --><!-- make it compatible with  quad gui -->
<!--             <remap from="sbus_bridge/arm" to="bridge/arm"/> -->
<!--         </node> -->

<!--         <node machine="$(arg quad_name)" pkg="rpg_single_board_io" type="voltage_reader" name="voltage_reader" -->
<!--               output="screen"> -->
<!--             <param name="board_name" value="up"/> -->
<!--             <param name="adc_id" value="0"/> -->
<!--             <param name="read_voltage_frequency" value="10"/> -->
<!--             <param name="voltage_divider_upper_res" value="183.51"/> -->
<!--             <param name="voltage_divider_lower_res" value="11.93"/> -->
<!--             <remap from="voltage_reader/voltage" to="battery_voltage"/> -->
<!--         </node> -->

<!--         <node machine="$(arg quad_name)" pkg="pixhawk_bridge" type="pixhawk_bridge" name="pixhawk_bridge_quad" -->
<!--               output="screen"> -->
<!--             <rosparam file="$(find pixhawk_bridge)/parameters/default.yaml"/> -->
<!--             <param name="port_name" value="/dev/ttyUSB0"/>  --><!-- /dev/ttyUSB0 -->
<!--             <param name="baud_rate" value="115200"/> -->
<!--             <param name="publish_sensors" value="true"/> -->
<!--             <param name="accept_commands" value="false"/> -->
<!--             <param name="handle_parameters" value="false"/> -->
<!--             <param name="publish_commands" value="true"/> -->
<!--             <remap from="pixhawk_bridge/control_active" to="bridge/arm"/> -->
<!--             <remap from="control_command" to="quad/control_command"/> -->
<!--         </node> -->

        <!-- start rest of the nodes on the base computer -->
        <node pkg="pixhawk_bridge" type="pixhawk_bridge" name="pixhawk_bridge" output="screen">
            <rosparam file="$(find pixhawk_bridge)/parameters/default.yaml"/>
            <param name="port_name" value="/dev/ttyUSB0"/>
            <param name="baud_rate" value="115200"/>
            <param name="publish_sensors" value="false"/>
            <param name="accept_commands" value="true"/>
            <param name="handle_parameters" value="false"/>
            <remap from="pixhawk_bridge/control_active" to="bridge/arm"/>
        </node>

        <!-- Autopilot -->
        <group unless="$(arg use_mpc)">
            <node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
                <rosparam file="$(find state_predictor)/parameters/default.yaml"/>
                <rosparam file="$(find position_controller)/parameters/default.yaml"/>
                <rosparam file="$(find autopilot)/parameters/default.yaml"/>

                <param name="position_controller/use_rate_mode" value="true"/>

                <param name="velocity_estimate_in_world_frame" value="true"/>
                <param name="state_estimate_timeout" value="0.1"/>
                <param name="control_command_delay" value="0.037"/>
                <param name="min_control_period" value="0.02"/>
                <param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)"/>

                <remap from="autopilot/state_estimate" to="state_estimate"/>
            </node>
        </group>
        <group if="$(arg use_mpc)">
            <node pkg="rpg_mpc" type="autopilot_mpc_instance" name="autopilot_mpc" output="screen">
                <rosparam file="$(find state_predictor)/parameters/default.yaml"/>
                <rosparam file="$(find rpg_mpc)/parameters/default.yaml"/>
                <rosparam file="$(find autopilot)/parameters/default.yaml"/>

                <param name="velocity_estimate_in_world_frame" value="true"/>
                <param name="state_estimate_timeout" value="0.1"/>
                <param name="control_command_delay" value="0.037"/>
                <param name="min_control_period" value="0.02"/>
                <param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)"/>

                <remap from="autopilot/state_estimate" to="state_estimate"/>
            </node>
        </group>

        <node pkg="optitrack_estimator" type="optitrack_estimator" name="optitrack_estimator" output="screen">
            <rosparam file="$(find state_predictor)/parameters/fpv.yaml"/>
            <rosparam file="$(find optitrack_estimator)/parameters/fpv.yaml"/>
            <remap from="optitrack_raw" to="/vicon/$(arg quad_name)"/>
            <remap from="optitrack_state_estimate" to="state_estimate"/>
        </node>

        <!-- node pkg="ekf_optitrack_estimator" type="ekf_optitrack_estimator" name="ekf_optitrack_estimator" output="screen">
            <remap from="optitrack_raw" to="/vicon/$(arg quad_name)"/>
            <remap from="optitrack_state_estimate" to="state_estimate_ekf"/>
        </node-->

        <node pkg="joy" type="joy_node" name="joy_node">
            <param name="autorepeat_rate" value="10"/>
            <param name="dev" value="/dev/input/js0"/>
        </node>

        <node pkg="manual_flight_assistant" type="manual_flight_assistant" name="manual_flight_assistant" output="screen">
            <rosparam file="$(find manual_flight_assistant)/parameters/default.yaml"/>
        </node>

        <node pkg="trackable_calibration" type="trackable_refinement" name="trackable_refinement" output="screen">
            <param name="num_pose_samples" type="int" value="200"/>
            <param name="calibration_file_name" value=" $(find rpg_calib)/trackables/$(arg quad_name).yaml"/>
            <param name="quad_trackable_name" value="$(arg quad_name)"/>
        </node>

    </group>
</launch>
